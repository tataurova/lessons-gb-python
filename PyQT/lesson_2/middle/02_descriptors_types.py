# --------------------- Дескрипторы атрибутов -------------------------------

print(' ============ Примеры работы с дескрипторами атрибутов ===============')

print(' ------------ Data-дескриптор ---------------')

class DataDesc:
    ''' Data-дескриптор
    '''
    def __get__(self, obj, cls=None):
        print('  DataDesc.__get__')
        print('  ', self, obj, cls)
        return '**magic-descriptor**'

    def __set__(self, obj, value):
        print('  DataDesc.__set__')
        print('  ', self, obj, value)
        pass

    def __delete__(self, obj):
        print('  DataDesc.__delete__')
        print('  ', self, obj)
        pass


class D:
    ''' Класс с дескриптором данных
    '''
    d = DataDesc()


d_obj = D()

print('0. Содержимое d_obj.__dict__ в самом начале:', d_obj.__dict__)

print('1. Получить значение атрибута...')
# При доступе к атрибуту будет вызван метод __get__ дескриптора
x = d_obj.d
print('1. Значение атрибута (доступ через дескриптор):', x)

# Создание атрибута в словаре экземпляра класса (дескриптор)
print('2. Установить значение атрибута...')
d_obj.d = "полезное значение"
print('3. Содержимое d_obj.__dict__ после установки атрибута:', d_obj.__dict__)

x = d_obj.d
print('4. Значение атрибута (доступ через дескриптор):', x)

# Удаление атрибута из словаря экземпляра класса
print('5. Удалить атрибут...')
del d_obj.d
print('6. Содержимое d_obj.__dict__ удаления атрибута:', d_obj.__dict__)


print('7. Получить атрибут на уровне класса...')
x = D.d
print('8. Значение атрибута D.d:', x)

# Дескриптор будет заменён обычной строкой на уровне класса
print('9. Установить D.d ...')
D.d = "=A value in class="            # <<-- здесь не вызывается метод __set__

print(' == \/ Обратите внимание  \/ ==')
print('10. Значение атрибута D.d:', D.d)
print('11. Значение атрибута d_obj.d:', d_obj.d)

print()
print(' ------------ Non-data-дескриптор ---------------')

class GetonlyDesc:
    ''' Non-data дескриптор
    '''
    def __get__(self, obj, cls=None):
        return '**magic-descriptor**'


class C:
    ''' Класс с одним дескриптором
    '''
    d = GetonlyDesc()


cobj = C()

# При доступе к атрибуту будет вызван метод __get__ дескриптора
x = cobj.d
print('0. Содержимое объекта в самом начале:', cobj.__dict__)
print('1. Значение атрибута (доступ через дескриптор):', x)

# Создание атрибута в словаре экземпляра класса (дескриптор)
cobj.d = "setting a value"
x = cobj.d
print('2. Значение атрибута (доступ через __dict__):', x)
print('3. Содержимое объекта после  установки атрибута:', cobj.__dict__)

# Удаление атрибута из словаря экземпляра класса
del cobj.d
print('4. Содержимое объекта после удаления атрибута:', cobj.__dict__)

x = C.d
print('5. Значение атрибута C.d:', x)

# Дескриптор будет заменён обычной строкой на уровне класса
C.d = "setting a value on class"
print('6. Значение атрибута C.d:', C.d)
